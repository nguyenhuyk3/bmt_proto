// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Product_GetFilmDuration_FullMethodName = "/product.Product/GetFilmDuration"
	Product_GetPriceOfFAB_FullMethodName   = "/product.Product/GetPriceOfFAB"
	Product_CheckFABExist_FullMethodName   = "/product.Product/CheckFABExist"
	Product_GetFilm_FullMethodName         = "/product.Product/GetFilm"
)

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductClient interface {
	GetFilmDuration(ctx context.Context, in *GetFilmDurationReq, opts ...grpc.CallOption) (*GetFilmDurationRes, error)
	GetPriceOfFAB(ctx context.Context, in *GetPriceOfFABReq, opts ...grpc.CallOption) (*GetPriceOfFABRes, error)
	CheckFABExist(ctx context.Context, in *CheckFABExistReq, opts ...grpc.CallOption) (*CheckFABExistRes, error)
	GetFilm(ctx context.Context, in *GetFilmReq, opts ...grpc.CallOption) (*GetFilmRes, error)
}

type productClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClient(cc grpc.ClientConnInterface) ProductClient {
	return &productClient{cc}
}

func (c *productClient) GetFilmDuration(ctx context.Context, in *GetFilmDurationReq, opts ...grpc.CallOption) (*GetFilmDurationRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilmDurationRes)
	err := c.cc.Invoke(ctx, Product_GetFilmDuration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetPriceOfFAB(ctx context.Context, in *GetPriceOfFABReq, opts ...grpc.CallOption) (*GetPriceOfFABRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPriceOfFABRes)
	err := c.cc.Invoke(ctx, Product_GetPriceOfFAB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CheckFABExist(ctx context.Context, in *CheckFABExistReq, opts ...grpc.CallOption) (*CheckFABExistRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckFABExistRes)
	err := c.cc.Invoke(ctx, Product_CheckFABExist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetFilm(ctx context.Context, in *GetFilmReq, opts ...grpc.CallOption) (*GetFilmRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilmRes)
	err := c.cc.Invoke(ctx, Product_GetFilm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServer is the server API for Product service.
// All implementations must embed UnimplementedProductServer
// for forward compatibility.
type ProductServer interface {
	GetFilmDuration(context.Context, *GetFilmDurationReq) (*GetFilmDurationRes, error)
	GetPriceOfFAB(context.Context, *GetPriceOfFABReq) (*GetPriceOfFABRes, error)
	CheckFABExist(context.Context, *CheckFABExistReq) (*CheckFABExistRes, error)
	GetFilm(context.Context, *GetFilmReq) (*GetFilmRes, error)
	mustEmbedUnimplementedProductServer()
}

// UnimplementedProductServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServer struct{}

func (UnimplementedProductServer) GetFilmDuration(context.Context, *GetFilmDurationReq) (*GetFilmDurationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilmDuration not implemented")
}
func (UnimplementedProductServer) GetPriceOfFAB(context.Context, *GetPriceOfFABReq) (*GetPriceOfFABRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceOfFAB not implemented")
}
func (UnimplementedProductServer) CheckFABExist(context.Context, *CheckFABExistReq) (*CheckFABExistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFABExist not implemented")
}
func (UnimplementedProductServer) GetFilm(context.Context, *GetFilmReq) (*GetFilmRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilm not implemented")
}
func (UnimplementedProductServer) mustEmbedUnimplementedProductServer() {}
func (UnimplementedProductServer) testEmbeddedByValue()                 {}

// UnsafeProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServer will
// result in compilation errors.
type UnsafeProductServer interface {
	mustEmbedUnimplementedProductServer()
}

func RegisterProductServer(s grpc.ServiceRegistrar, srv ProductServer) {
	// If the following call pancis, it indicates UnimplementedProductServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Product_ServiceDesc, srv)
}

func _Product_GetFilmDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilmDurationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetFilmDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetFilmDuration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetFilmDuration(ctx, req.(*GetFilmDurationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetPriceOfFAB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceOfFABReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetPriceOfFAB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetPriceOfFAB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetPriceOfFAB(ctx, req.(*GetPriceOfFABReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CheckFABExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFABExistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CheckFABExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CheckFABExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CheckFABExist(ctx, req.(*CheckFABExistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetFilm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetFilm(ctx, req.(*GetFilmReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Product_ServiceDesc is the grpc.ServiceDesc for Product service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Product_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.Product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFilmDuration",
			Handler:    _Product_GetFilmDuration_Handler,
		},
		{
			MethodName: "GetPriceOfFAB",
			Handler:    _Product_GetPriceOfFAB_Handler,
		},
		{
			MethodName: "CheckFABExist",
			Handler:    _Product_CheckFABExist_Handler,
		},
		{
			MethodName: "GetFilm",
			Handler:    _Product_GetFilm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
